04_17

SINGLE_TABLE 전략 (단일 테이블 전략)
	모든 자식 객체를 모아서 하나의 테이블로 생성하며, 
	구분 컬럼을 추가하여 각 정보를 구분할 수 있도록 하는 전략
	조인을 사용할 필요 없이 조회 가능.
	쿼리를 단순하게 작서하여 조회할 수 있다.
	자식 엔티티의 필드는 @NotNull을 사용할 수 없다.
	테이블의 컬럼이 많아질 수록 조회 성능이 떨어질 수 있다.

TABLE_PER_CLASS 전략 (엔티티 당 한개 테이블 전략)
	부모 엔티티와 자식 엔티티마다 테이블을 생성하는 전략, 실무에서의 사용을 권장하지 않는다.
	자식 엔티티의 필드는 @NotNull 사용할 수 있다.
	자식 테이블끼리 JOIN시 겹치는 컬럼으로 인해 조회 성능이 떨어지고 쿼리가 복잡해진다.

JOINED 전략 (조인 전략)
	부모 엔티티의 PK를 슈퍼키로 설정하고, 자식 엔티티의 PK를 서브키로 설정하는 전략.
	정규화 방식
	조회 시 JOIN으로 인해 성능 저하가 발생한다.
	복잡한 쿼리 작성 필요
	INSERT시 쿼리 2번 실행

성능 좋은순
일반쿼리 -> 한방쿼리 -> 쿼리 두번

모든 테이블에 이 컬럼들이 들어가야됨
private LocalDateTime createdDate;
private LocalDateTime updateDate;

Embeddable
	상속관계가 아닌 필드의 그룹화(모듈화)를 목적으로 사용한다.
	그룹화 된 필드는 따로 사용하지 않고 한 번에 사용하는 목적으로 설계한다.

@MappedSuperclass
	자바 진영에서는 상속관계이지만, RDB진영에는 상속관계가 아님을 표시할 때 사용
	각 필드를 개별적으로 사용하거나 바로 접근해야 할 때 사용
	이 어노테이션이 달린 테이블은 없다고 생각함
	@Getter만 

@PrePersist
	해당 메소드가 실행되기 전에 자동으로 실행시켜라

부모 테이블에 extends Period

@ToString(callSuper = true)
-> false일 경우 부모의 toString을 출력해주지 않겠다는 설정

@DynamicInsert // 필드에 null이 들어가 있다면 INSERT 쿼리에 해당 필드를 제외해준다.
@DynamicUpdate // 필드에 null이 들어가 있다면 UPDATE SET절에 해당 필드를 제외해준다.

@Embedded